{"version":3,"sources":["logo.svg","Connect4.js","App.js","reportWebVitals.js","index.js"],"names":["Connect4","props","boardDrawn","i","row","j","push","state","board","moveRow","moveCol","this","isGameOver","turn","setState","emptyCells","player","titleMessage","hideTurnMessage","winner","style","alignItems","justifyContent","display","backgroundColor","color","getColor","map","col","disabled","getLocked","minHeight","minWidth","onClick","playMove","hidden","String","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f84f7b4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\n\r\n// Connect4 Class that is exported and imported into App.js\r\nclass Connect4 extends React.Component{\r\n   // Constructor of the app to initialize the game and create the board\r\n   constructor(props){\r\n      // Calling parent constructor\r\n      super(props)\r\n\r\n      // Creating the game board by creating 6 rows eacb with 7 columns inside\r\n      // Pushing all these rows into a board with each cell having a value of 0 inside\r\n      // 0 means this square hasn't been selected by a player\r\n      let boardDrawn = [];\r\n      for (let i = 0; i < 6; i++) {\r\n         let row = [];\r\n         for (let j = 0; j < 7; j++) { \r\n            row.push(0);\r\n         }\r\n         boardDrawn.push(row);\r\n      }\r\n\r\n      // Creating states to be remembered throughout the game\r\n      this.state = {\r\n         board : boardDrawn,                 // The game board\r\n         'turn':1,                           // The current player's turn\r\n         'winner':0,                         // The winner of the game\r\n         'isGameOver': false,                  // Whether the game is over or not\r\n         'titleMessage':'Play Connect4!',    // The title message at the top of the screen\r\n         'hideTurnMessage': false            // Whether the massage at the bottom of the screen should be hidden or not           \r\n      }\r\n   }\r\n\r\n   // Function is called once a play makes a move on the game board\r\n   // i.e. When the player clicks one of the non-chosen squares\r\n   // Takes two parameters, the chosen square's row and column\r\n   playMove(moveRow,moveCol){\r\n      // Checking to see if the game is over or not, \r\n      // if so then no moves can be played\r\n      // if not then continue playing the game and process the move\r\n      if(!this.state.isGameOver){\r\n         // Getting the current state of the board and populating a board variable\r\n         let board = this.state.board;\r\n         // Double checking to see if the move has been played yet \r\n         // (value will be 1 or 2 if a move has been played)\r\n         if(!board[moveRow][moveCol]){\r\n            // Setting the value of the square to be the player's ID (1 or 2)\r\n            // Setting the state of the board to be updated with the new move\r\n            board[moveRow][moveCol] = this.state.turn\r\n            this.setState({'board':board})\r\n         }\r\n         \r\n         // Analyze the board to see if the current player won\r\n         // However only check the vertical and horizontal possibilities of a win\r\n         // based off of the square played\r\n         // This is done by keeping the moveCol value constant to check the vertical wins\r\n         // and keeping the moveRow value constant to check the horizontal wins\r\n\r\n         // Analyzing the board to see if there is a vertical line win\r\n         // i.e. when 4 consecutive squares have the same colour (or value of the player ID)\r\n         // The for loop starts at the fourth row from the bottom since you can't win with only 3 squares\r\n         // Then checks to see if all squares below it have the same ID value\r\n         // If no win is found then the loop moves up to the fifth and then sixth rows from the bottom to check\r\n         for(let i = 2; i >= 0; i--){\r\n            // Evaluating whether the highest row and the rows below it have the same player ID value in it (must be non-zero)\r\n            if((board[i][moveCol] === board[i+1][moveCol])&&\r\n               (board[i][moveCol] === board[i+2][moveCol])&&\r\n               (board[i][moveCol] === board[i+3][moveCol])&&\r\n               (board[i][moveCol] != 0)){\r\n                  // If a win is found by either player 1 or 2\r\n                  // Then set the game over state to be true\r\n                  // Input the winner state as the player that just made a move\r\n                  // Change the top title message to state the winner of the game\r\n                  // Hide the button message that indicates the players turns\r\n                  // Break the loop since the game is over and a winner has been declared\r\n                  this.setState({'isGameOver' : true});\r\n                  this.setState({'winner' : board[i][moveCol]});\r\n                  this.setState({'titleMessage': 'Player ' + board[i][moveCol] + ' Wins!'})\r\n                  this.setState({'hideTurnMessage':true})\r\n                  break;\r\n            }\r\n         }\r\n\r\n         // Analyzing the board to see if there is a horizontal line win\r\n         // i.e. when 4 consecutive squares have the same colour (or value of the player ID)\r\n         // The for loop starts at the fourth column from the left since you can't win with only 3 squares\r\n         // Then checks to see if all squares right of it have the same ID value\r\n         // If no win is found then the loop moves up to the third, second, and first rows from the left to check\r\n         for(let j = 3; j >= 0; j--){\r\n            // Evaluating whether the particular column and the rows right of it have the same player ID value in it (must be non-zero)\r\n            if((board[moveRow][j] === board[moveRow][j+1])&&\r\n               (board[moveRow][j] === board[moveRow][j+2])&&\r\n               (board[moveRow][j] === board[moveRow][j+3])&&\r\n               (board[moveRow][j] != 0)){\r\n                  // If a win is found by either player 1 or 2\r\n                  // Then set the game over state to be true\r\n                  // Input the winner state as the player that just made a move\r\n                  // Change the top title message to state the winner of the game\r\n                  // Hide the button message that indicates the players turns\r\n                  // Break the loop since the game is over and a winner has been declared\r\n                  this.setState({'isGameOver' : true});\r\n                  this.setState({'winner' : board[moveRow][j]});\r\n                  this.setState({'titleMessage': 'Player ' + board[moveRow][j] + ' Wins!'})\r\n                  this.setState({'hideTurnMessage':true})\r\n                  break;\r\n            }\r\n         }\r\n         \r\n         // Now analyze the board to see if all the squares are filled\r\n         // Check to see if the game is over or not\r\n         // If the game is over then there is no need to check\r\n         // If the game isn't over check to see if there is any empty cells left\r\n         // If not, then the game is a tie, if there is then the game can continue\r\n         if(!this.state.isGameOver){\r\n            // Boolean value to set whether there is empty squares or not\r\n            let emptyCells = false;\r\n            // Start from the first row and iterate through all other 6 rows\r\n            for (let i = 0; i < 6 && !emptyCells; i++) {\r\n               // Start from the first column and iterate through all 7 columns\r\n               for (let j = 0; j < 7 && !emptyCells; j++) { \r\n                  // If there is a value of 0 then there is an empty cell and set emptyCells to true\r\n                  if(board[i][j] === 0)\r\n                     emptyCells = true;\r\n               }\r\n            }\r\n            // If all cells (squares) have been checked and there is no unpicked (empty) cells then end the game as a tie\r\n            if(!emptyCells){\r\n               // Set the game over state to be true\r\n               // Set the winner to 0 (meaning it is a tie)\r\n               // Set the title message to state it is a tie game\r\n               // Hide the turn message at the bottom since the game is over\r\n               this.setState({'isGameOver' : true});\r\n               this.setState({'winner' : 0});\r\n               this.setState({'titleMessage': 'Tie Game'})\r\n               this.setState({'hideTurnMessage':true})\r\n            }\r\n         }\r\n\r\n         // Chnage the player to alternate turns\r\n         this.setState({'turn' : (this.state.turn === 1) ? 2 : 1})\r\n      }\r\n   }\r\n\r\n   // Get the associated colour of the cell/message to the player\r\n   // Player 1 is red, Player 2 is yellow, and a nonselected (value of 0) cell is lightgrey\r\n   getColor(player){\r\n      if(player === 1)\r\n         return 'red'\r\n      else if(player === 2)\r\n         return 'yellow'\r\n      else\r\n         return 'lightgrey'\r\n   }\r\n\r\n   // If the cell has a non-zero value in it, this means it is unselected\r\n   // If it has a value of a player (1 or 2) in it then button should be locked\r\n   getLocked(player){\r\n      if(player > 0)\r\n         return true\r\n      else\r\n         return false\r\n   }\r\n\r\n   // Render the actual game\r\n   render() {\r\n      // Set variables for all the states of the game\r\n      let { board, titleMessage, turn, hideTurnMessage, isGameOver, winner } = this.state;\r\n\r\n      // Returning the game board and associated messages to be able to see and play the game\r\n      \r\n      // FIRST ELEMENT (Header)\r\n      // First header is to state the game title and the winner of the game\r\n      // If the game is over and there is a winner then change the title colour to the winner's colour\r\n\r\n      // SECOND ELEMENT (The Game Board)\r\n      // By using board.map all cells within the board can be given a button element for the players to click on\r\n      // Where row is the current value and i is the index\r\n      // Then by using the row value we can use row.map to create each button for the cells\r\n      // Each button should be disabled if selected (getLocked function) and the colour should be set to the associated player ID's colour (getColor function)\r\n      // On click of a button is a function declaration calling the playMove function\r\n\r\n      // THIRD ELEMENT (HEADER)\r\n      // This outlines the current players turn with the color being the color associated with the player ID\r\n      // This is hidden once the game is over\r\n      return (\r\n         <div>\r\n            <div>\r\n               <h1 style={{\r\n                     alignItems: 'center',\r\n                     justifyContent: 'center',\r\n                     display:'flex',\r\n                     backgroundColor:'black',\r\n                     color:isGameOver && winner!=0? this.getColor(winner):'white'\r\n                     }}\r\n                  >{titleMessage}</h1>\r\n            </div>\r\n            <div>\r\n               {board.map((row, i) => (\r\n               <div style={{\r\n                     alignItems: 'center',\r\n                     justifyContent: 'center',\r\n                     display:'flex'\r\n                     }}\r\n                  key={i}>\r\n                  {row.map((col, j) => (\r\n                     <button\r\n                        disabled={this.getLocked(this.state.board[i][j])}\r\n                        style={{\r\n                           minHeight: 100,\r\n                           minWidth : 100,\r\n                           backgroundColor: this.getColor(this.state.board[i][j])\r\n                        }} \r\n                        onClick = {() => {\r\n                           this.playMove(i,j)\r\n                        }} \r\n                        key={j}>\r\n                     </button>\r\n                  ))}\r\n               </div>\r\n               ))}\r\n            </div>\r\n            <div hidden={hideTurnMessage}>\r\n               <h1 \r\n                  style={{\r\n                     backgroundColor:'black',\r\n                     color: this.getColor(turn),\r\n                     alignItems: 'center',\r\n                     justifyContent: 'center',\r\n                     display:'flex'\r\n                     }}\r\n                  >{'Player ' + String(turn) + 's turn'}\r\n               </h1>\r\n            </div>\r\n         </div>\r\n      );\r\n   }\r\n}\r\n\r\n// To export the Connect4 class an be used in App.js\r\nexport default Connect4;\r\n","import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\nimport Connect4 from './Connect4'; // Importing the Connect4 script\n\n// App Class that is exported and imported into index.js\nclass App extends React.Component{\n   render(){\n      return(\n         // Creating the Connect4 Game\n         <Connect4/>\n      )\n   }\n}\n\n// To export the App class an be used in index.js\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}